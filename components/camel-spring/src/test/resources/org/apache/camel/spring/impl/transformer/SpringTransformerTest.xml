<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
    ">

    <bean id="myTypeConverters" class="org.apache.camel.impl.transformer.TransformerTest$MyTypeConverters"/>
    <bean id="myJsonDataFormatDef" class="org.apache.camel.impl.transformer.TransformerTest$MyJsonDataFormatDefinition"/>
    <bean id="myXmlProcessor" class="org.apache.camel.spring.impl.transformer.SpringTransformerTest$MyXmlProcessor"/>
    <bean id="myOtherBean" class="org.apache.camel.impl.transformer.TransformerTest$MyOtherBean"/>
    
    <camelContext xmlns="http://camel.apache.org/schema/spring">
    
        <endpoint id="myXmlEndpoint" uri="direct:endpointXmlTransformer"/>
        
        <transformers>
            <dataFormatTransformer ref="myJsonDataFormatDef" scheme="json"/>
            <endpointTransformer ref="myXmlEndpoint" from="xml:{urn:test:xml}XmlXOrder" to="java:org.apache.camel.impl.transformer.TransformerTest$XOrder"/>
            <endpointTransformer ref="myXmlEndpoint" from="java:org.apache.camel.impl.transformer.TransformerTest$XOrderResponse" to="xml:{urn:test:xml}XmlXOrderResponse"/>
            <beanTransformer ref="myOtherBean" method="toXOrder" from="other:{urn:test:other}OtherXOrder" to="java:org.apache.camel.impl.transformer.TransformerTest$XOrder"/>
            <beanTransformer ref="myOtherBean" method="toOtherXOrderResponse" from="java:org.apache.camel.impl.transformer.TransformerTest$XOrderResponse" to="other:{urn:test:other}OtherXOrderResponse"/>
        </transformers>
        
        <route>
            <from uri="direct:abc">
                <inputType urn="java:org.apache.camel.impl.transformer.TransformerTest$AOrder"/>
                <outputType urn="java:org.apache.camel.impl.transformer.TransformerTest$AOrderResponse"/>
            </from>
            <when>
                <simple>${body} not is 'org.apache.camel.impl.transformer.TransformerTest\\$AOrder'</simple>
                <throwException exceptionType="java.lang.Exception" message="expected AOrder object but was '${body}'"/>
            </when>
            <inOut uri="direct:xyz">
                <inputType urn="java:org.apache.camel.impl.transformer.TransformerTest$BOrder"/>
                <outputType urn="java:org.apache.camel.impl.transformer.TransformerTest$BOrderResponse"/>
            </inOut>
            <to uri="mock:abcresult"/>
        </route>

        <route>
            <from uri="direct:xyz">
                <inputType urn="java:org.apache.camel.impl.transformer.TransformerTest$XOrder"/>
                <outputType urn="java:org.apache.camel.impl.transformer.TransformerTest$XOrderResponse"/>
            </from>
            <when>
                <simple>${body} not is 'org.apache.camel.impl.transformer.TransformerTest\\$XOrder'</simple>
                <throwException exceptionType="java.lang.Exception" message="expected XOrder object but was '${body}'"/>
            </when>
            <setBody><constant>response</constant></setBody>
            <to uri="mock:xyzresult"/>
        </route>
        
        <route>
            <from uri="direct:dataFormat">
                <inputType urn="json:{urn:test:json}JsonXOrder"/>
                <outputType urn="json:{urn:test:json}JsonXOrderResponse"/>
            </from>
            <inOut uri="direct:xyz"/>
        </route>
        
        <route>
            <from uri="direct:endpoint">
                <contract input="xml:{urn:test:xml}XmlXOrder" output="xml:{urn:test:xml}XmlXOrderResponse"/>
            </from>
            <inOut uri="direct:xyz"/>
        </route>
        
        <route>
            <from uri="direct:endpointXmlTransformer"/>
            <process ref="myXmlProcessor"/>
        </route>
        
        <route>
            <from uri="direct:bean">
                <inputType urn="other:{urn:test:other}OtherXOrder"/>
                <outputType urn="other:{urn:test:other}OtherXOrderResponse"/>
            </from>
            <inOut uri="direct:xyz"/>
        </route>
        
    </camelContext>
  
</beans>
